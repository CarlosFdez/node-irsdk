var JsIrSdk = require('./irsdk-js-wrapper');
var IrSdkWrapper = require('./irsdk-node-wrapper-mock');

describe('irsdk-js-wrapper', function () {
  beforeEach(function () {
    this.clock = sinon.useFakeTimers();
  });
  afterEach(function () {
    this.clock.restore();
  });
  it('emits "Connected" when iRacing available', function () {
    var mock = Object.create(IrSdkWrapper);
    var start = sinon.stub(mock,"start");
    start.returns(true);
    irsdk = new JsIrSdk(mock);
    var isConnected = sinon.stub(mock,"isConnected");
    isConnected.returns(false);
    var spy = sinon.spy();
    irsdk.on('Connected', spy);
    this.clock.tick(20);
    spy.should.not.have.been.called;
    isConnected.returns(true);
    this.clock.tick(20);
    spy.should.have.been.called;
    start.should.have.been.calledOnce;
  });
  it('emits "Disconnected" when iRacing shut down', function () {
    var mock = Object.create(IrSdkWrapper);
    irsdk = new JsIrSdk(mock);
    var isConnected = sinon.stub(mock,"isConnected");
    isConnected.returns(true);
    var spy = sinon.spy();
    irsdk.on('Disconnected', spy);
    this.clock.tick(20);
    spy.should.not.have.been.called;
    isConnected.returns(false);
    this.clock.tick(20);
    spy.should.have.been.called;
  });
  it('emits "Connected" again after reconnect', function () {
    var mock = Object.create(IrSdkWrapper);
    var start = sinon.stub(mock,"start");
    start.returns(true);
    var isConnected = sinon.stub(mock,"isConnected");
    isConnected.returns(true);
    irsdk = new JsIrSdk(mock);
    start.should.have.been.calledOnce;
    this.clock.tick(20);
    isConnected.returns(false);
    this.clock.tick(12000);
    start.should.have.been.calledTwice;
    var restartSpy = sinon.spy();
    irsdk.on('Connected', restartSpy);
    isConnected.returns(true);
    this.clock.tick(20);
    restartSpy.should.have.been.called;
  });
  it('emits "TelemetryDescription" once after "Connected"', function () {
    var mock = Object.create(IrSdkWrapper);
    var updateTelemetry = sinon.stub(mock,"updateTelemetry");
    updateTelemetry.returns(true);
    var getTelemetryDescription = sinon.stub(mock,"getTelemetryDescription");
    var desc = [{"RPM": 'engine revs per minute'}];
    getTelemetryDescription.returns(desc);
    var isConnected = sinon.stub(mock,"isConnected");
    isConnected.returns(true);
    irsdk = new JsIrSdk(mock);
    var spy = sinon.spy();
    irsdk.on('TelemetryDescription', spy);
    this.clock.tick(20);
    spy.should.have.been.calledOnce;
    spy.should.have.been.calledWith(desc);
    this.clock.tick(20);
    spy.should.have.been.calledOnce;
  });
  it('emits "Telemetry" when update available', function () {
    var mock = Object.create(IrSdkWrapper);
    var updateTelemetry = sinon.stub(mock,"updateTelemetry");
    updateTelemetry.returns(true);
    var getTelemetry = sinon.stub(mock,"getTelemetry");
    var data = [{"RPM": 1100}];
    getTelemetry.returns(data);
    var isConnected = sinon.stub(mock,"isConnected");
    isConnected.returns(true);
    irsdk = new JsIrSdk(mock);
    var spy = sinon.spy();
    irsdk.on('Telemetry', spy);
    this.clock.tick(6);
    spy.should.have.been.calledOnce;
    spy.should.have.been.calledWith(data);
    updateTelemetry.returns(false);
    this.clock.tick(20);
    spy.should.have.been.calledOnce;
    updateTelemetry.returns(true);
    this.clock.tick(6);
    spy.should.have.been.calledTwice;
  });
  it('emits "SessionInfo" when update available', function () {
    var mock = Object.create(IrSdkWrapper);
    var updateSessionInfo = sinon.stub(mock,"updateSessionInfo");
    updateSessionInfo.returns(true);
    var getSessionInfo = sinon.stub(mock,"getSessionInfo");
    var data = {"type": "race"};
    getSessionInfo.returns(data);
    var isConnected = sinon.stub(mock,"isConnected");
    isConnected.returns(true);
    irsdk = new JsIrSdk(mock);
    var spy = sinon.spy();
    irsdk.on('SessionInfo', spy);
    this.clock.tick(500);
    spy.should.have.been.calledOnce;
    // spy.should.have.been.calledWith(data);
    updateSessionInfo.returns(false);
    this.clock.tick(500);
    spy.should.have.been.calledOnce;
    updateSessionInfo.returns(true);
    this.clock.tick(500);
    spy.should.have.been.calledTwice;
  });
});